// NOTE - eventually this file will be automatically updated using a Perl script that understand
// the naming of test case files, functions, and namespaces.

#ifndef _TESTCASES_H
#define _TESTCASES_H

#ifdef __cplusplus
extern "C" {
#endif

// declare C good and bad functions
#ifndef OMITGOOD
	/* BEGIN-AUTOGENERATED-C-GOOD-FUNCTION-DECLARATIONS */
	void CWE191_Integer_Underflow__char_rand_multiply_02_good();

	void CWE191_Integer_Underflow__char_fscanf_sub_02_good();

	void CWE191_Integer_Underflow__char_fscanf_sub_01_good();

	void CWE191_Integer_Underflow__int64_t_min_multiply_01_good();

	void CWE191_Integer_Underflow__char_fscanf_multiply_02_good();

	void CWE191_Integer_Underflow__char_min_sub_01_good();

	void CWE191_Integer_Underflow__int64_t_min_sub_02_good();

	void CWE191_Integer_Underflow__int64_t_min_multiply_02_good();

	void CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_good();

	void CWE191_Integer_Underflow__int64_t_fscanf_sub_01_good();

	void CWE191_Integer_Underflow__char_rand_multiply_01_good();

	void CWE191_Integer_Underflow__char_min_sub_02_good();

	void CWE191_Integer_Underflow__int64_t_fscanf_sub_02_good();

	void CWE191_Integer_Underflow__char_min_multiply_01_good();

	void CWE191_Integer_Underflow__char_rand_sub_02_good();

	void CWE191_Integer_Underflow__int64_t_min_sub_01_good();

	void CWE191_Integer_Underflow__char_min_multiply_02_good();

	void CWE191_Integer_Underflow__int64_t_rand_multiply_01_good();

	void CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_good();

	void CWE191_Integer_Underflow__int64_t_rand_multiply_02_good();

	void CWE191_Integer_Underflow__char_fscanf_multiply_01_good();

	void CWE191_Integer_Underflow__char_rand_sub_01_good();

	/* END-AUTOGENERATED-C-GOOD-FUNCTION-DECLARATIONS */
#endif // OMITGOOD


#ifndef OMITBAD
	/* BEGIN-AUTOGENERATED-C-BAD-FUNCTION-DECLARATIONS */
	void CWE191_Integer_Underflow__char_rand_multiply_02_bad();

	void CWE191_Integer_Underflow__char_fscanf_sub_02_bad();

	void CWE191_Integer_Underflow__char_fscanf_sub_01_bad();

	void CWE191_Integer_Underflow__int64_t_min_multiply_01_bad();

	void CWE191_Integer_Underflow__char_fscanf_multiply_02_bad();

	void CWE191_Integer_Underflow__char_min_sub_01_bad();

	void CWE191_Integer_Underflow__int64_t_min_sub_02_bad();

	void CWE191_Integer_Underflow__int64_t_min_multiply_02_bad();

	void CWE191_Integer_Underflow__int64_t_fscanf_multiply_01_bad();

	void CWE191_Integer_Underflow__int64_t_fscanf_sub_01_bad();

	void CWE191_Integer_Underflow__char_rand_multiply_01_bad();

	void CWE191_Integer_Underflow__char_min_sub_02_bad();

	void CWE191_Integer_Underflow__int64_t_fscanf_sub_02_bad();

	void CWE191_Integer_Underflow__char_min_multiply_01_bad();

	void CWE191_Integer_Underflow__char_rand_sub_02_bad();

	void CWE191_Integer_Underflow__int64_t_min_sub_01_bad();

	void CWE191_Integer_Underflow__char_min_multiply_02_bad();

	void CWE191_Integer_Underflow__int64_t_rand_multiply_01_bad();

	void CWE191_Integer_Underflow__int64_t_fscanf_multiply_02_bad();

	void CWE191_Integer_Underflow__int64_t_rand_multiply_02_bad();

	void CWE191_Integer_Underflow__char_fscanf_multiply_01_bad();

	void CWE191_Integer_Underflow__char_rand_sub_01_bad();

	/* END-AUTOGENERATED-C-BAD-FUNCTION-DECLARATIONS */
#endif // OMITBAD

#ifdef __cplusplus
} // end extern "C"
#endif

#ifdef __cplusplus
// declare C++ namespaces and good and bad functions

#ifndef OMITGOOD
	/* BEGIN-AUTOGENERATED-CPP-GOOD-FUNCTION-DECLARATIONS */

	/* END-AUTOGENERATED-CPP-GOOD-FUNCTION-DECLARATIONS */
#endif // OMITGOOD


#ifndef OMITBAD
	/* BEGIN-AUTOGENERATED-CPP-BAD-FUNCTION-DECLARATIONS */

	/* END-AUTOGENERATED-CPP-BAD-FUNCTION-DECLARATIONS */
#endif // OMITBAD


#endif // __cplusplus


#endif //  _TESTCASES_H
